generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
 url = env("DATABASE_URL")
}

model actividades {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  label      String    @db.VarChar(255)
  estatus    Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model clientes {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  rfc             String    @unique(map: "clientes_rfc_unique") @db.VarChar(255)
  nombre          String    @db.VarChar(255)
  fechaNacimiento DateTime  @db.Date
  direccion       String    @db.VarChar(255)
  colonia         String    @db.VarChar(255)
  codigoPostal    String    @db.VarChar(255)
  estado_id       BigInt    @db.UnsignedBigInt
  ciudad          String    @db.VarChar(255)
  correo          String?   @db.VarChar(255)
  telefono        String?   @db.VarChar(45)
  celular         String?   @db.VarChar(45)
  oficina         String?   @db.VarChar(45)
  casa            String?   @db.VarChar(45)
  observaciones   String?   @db.Text
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
  polizas         polizas[]
}

model compania {
  id                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  rfc                     String                    @unique(map: "compania_rfc_unique") @db.VarChar(255)
  nombre                  String                    @db.VarChar(255)
  nombreCorto             String                    @db.VarChar(255)
  direccion               String?                   @db.VarChar(255)
  estado                  String?                   @db.VarChar(45)
  codigoPostal            String?                   @db.VarChar(255)
  ciudad                  String?                   @db.VarChar(255)
  limitePrimerPago        Decimal?                  @db.Decimal(10, 2)
  limitePrimerSubsecuente Decimal?                  @db.Decimal(10, 2)
  estatus                 Boolean?                  @default(false)
  colonia                 String?                   @db.VarChar(45)
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(0)
  compania_representantes compania_representantes[]
  companias_productos     companias_productos[]
  companias_ramos         companias_ramos[]
  polizas                 polizas[]
  usuario_claves          usuario_claves[]
}

model compania_representantes {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  compania_id BigInt    @db.UnsignedBigInt
  nombre      String    @db.VarChar(255)
  telefono    String    @db.VarChar(255)
  correo      String    @unique(map: "compania_representantes_correo_unique") @db.VarChar(255)
  cargo       String    @db.VarChar(255)
  estatus     Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  compania    compania  @relation(fields: [compania_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "compania_representantes_compania_id_foreign")

  @@index([compania_id], map: "compania_representantes_compania_id_foreign")
}

model companias_productos {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  compania_id BigInt    @db.UnsignedBigInt
  ramo_id     BigInt    @db.UnsignedBigInt
  nombre      String    @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  estatus     Boolean?  @default(false)
  compania    compania  @relation(fields: [compania_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "companias_productos_compania_id_foreign")
  ramos       ramos     @relation(fields: [ramo_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "companias_productos_ramo_id_foreign")
  polizas     polizas[]

  @@index([compania_id], map: "companias_productos_compania_id_foreign")
  @@index([ramo_id], map: "companias_productos_ramo_id_foreign")
}

model companias_ramos {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  compania_id BigInt    @db.UnsignedBigInt
  ramo_id     BigInt    @db.UnsignedBigInt
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  estatus     Boolean?  @default(false)
  compania    compania  @relation(fields: [compania_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "companias_ramos_compania_id_foreign")
  ramos       ramos     @relation(fields: [ramo_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "companias_ramos_ramo_id_foreign")

  @@index([compania_id], map: "companias_ramos_compania_id_foreign")
  @@index([ramo_id], map: "companias_ramos_ramo_id_foreign")
}

model estados {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  label      String    @db.VarChar(255)
  estatus    Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model estatus_cliente {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  label      String    @db.VarChar(255)
  estatus    Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model estatus_polizas {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  label      String    @db.VarChar(255)
  estatus    Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model formas_de_pago {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  label      String    @db.VarChar(255)
  estatus    Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  polizas    polizas[]
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model metodos_de_pago {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  label      String    @db.VarChar(255)
  estatus    Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  polizas    polizas[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model monedas {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  label      String    @db.VarChar(255)
  estatus    Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  polizas    polizas[]
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model poliza_asegurados {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  poliza_id       BigInt    @db.UnsignedBigInt
  cliente_id      BigInt?
  rfc             String    @unique(map: "clientes_rfc_unique") @db.VarChar(255)
  nombre          String    @db.VarChar(255)
  fechaNacimiento DateTime  @db.Date
  direccion       String    @db.VarChar(255)
  colonia         String    @db.VarChar(255)
  codigoPostal    String    @db.VarChar(255)
  estado_id       BigInt    @db.UnsignedBigInt
  ciudad          String    @db.VarChar(255)
  correo          String?   @db.VarChar(255)
  telefono        String?   @db.VarChar(45)
  celular         String?   @db.VarChar(45)
  oficina         String?   @db.VarChar(45)
  casa            String?   @db.VarChar(45)
  observaciones   String?   @db.Text
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  updated_at      DateTime? @default(now()) @db.Timestamp(0)
}

model poliza_historial {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  poliza_id  BigInt?
  accion     String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model poliza_recibos {
  id             BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  poliza_id      BigInt                 @db.UnsignedBigInt
  numeroRecibo   String                 @unique(map: "poliza_recibos_numerorecibo_unique") @db.VarChar(255)
  vencimiento    DateTime               @db.Date
  importe        Decimal                @db.Decimal(15, 2)
  estatus        poliza_recibos_estatus @default(Pendiente)
  fechaPago      DateTime?              @db.Date
  fechaCancelado DateTime?              @db.Date
  evidencia      String?                @db.VarChar(255)
  created_at     DateTime?              @db.Timestamp(0)
  updated_at     DateTime?              @db.Timestamp(0)
  polizas        polizas                @relation(fields: [poliza_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "poliza_recibos_poliza_id_foreign")

  @@index([poliza_id], map: "poliza_recibos_poliza_id_foreign")
}

model polizas {
  id                   BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  numeroPoliza         String?              @unique(map: "polizas_numeropoliza_unique") @db.VarChar(255)
  numeroCliente        String?              @db.VarChar(255)
  inicioVigencia       DateTime             @db.Date
  finVigencia          DateTime             @db.Date
  antiguedad           Int
  primaNeta            Decimal              @db.Decimal(15, 2)
  financiamiento       Decimal?             @db.Decimal(15, 2)
  primaTotal           Decimal              @db.Decimal(15, 2)
  estatus_id           BigInt
  comisionAgente       Decimal?             @db.Decimal(15, 2)
  pagoInicial          Decimal              @db.Decimal(15, 2)
  pagoSubsecuente      Decimal              @db.Decimal(15, 2)
  cliente_id           BigInt               @db.UnsignedBigInt
  formaPago_id         BigInt               @db.UnsignedBigInt
  tipoVencimiento_id   BigInt               @db.UnsignedBigInt
  compania_id          BigInt               @db.UnsignedBigInt
  subAgente_id         BigInt?              @db.UnsignedBigInt
  ramo_id              BigInt               @db.UnsignedBigInt
  metodoPago_id        BigInt               @db.UnsignedBigInt
  moneda_id            BigInt               @db.UnsignedBigInt
  producto_id          BigInt               @db.UnsignedBigInt
  created_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @db.Timestamp(0)
  poliza_recibos       poliza_recibos[]
  clientes             clientes             @relation(fields: [cliente_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "polizas_cliente_id_foreign")
  compania             compania             @relation(fields: [compania_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "polizas_compania_id_foreign")
  formas_de_pago       formas_de_pago       @relation(fields: [formaPago_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "polizas_formapago_id_foreign")
  metodos_de_pago      metodos_de_pago      @relation(fields: [metodoPago_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "polizas_metodopago_id_foreign")
  monedas              monedas              @relation(fields: [moneda_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "polizas_moneda_id_foreign")
  companias_productos  companias_productos  @relation(fields: [producto_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "polizas_producto_id_foreign")
  ramos                ramos                @relation(fields: [ramo_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "polizas_ramo_id_foreign")
  usuarios             usuarios?            @relation(fields: [subAgente_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "polizas_subagente_id_foreign")
  tipos_de_vencimiento tipos_de_vencimiento @relation(fields: [tipoVencimiento_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "polizas_tipovencimiento_id_foreign")

  @@index([cliente_id], map: "polizas_cliente_id_foreign")
  @@index([compania_id], map: "polizas_compania_id_foreign")
  @@index([formaPago_id], map: "polizas_formapago_id_foreign")
  @@index([metodoPago_id], map: "polizas_metodopago_id_foreign")
  @@index([moneda_id], map: "polizas_moneda_id_foreign")
  @@index([producto_id], map: "polizas_producto_id_foreign")
  @@index([ramo_id], map: "polizas_ramo_id_foreign")
  @@index([subAgente_id], map: "polizas_subagente_id_foreign")
  @@index([tipoVencimiento_id], map: "polizas_tipovencimiento_id_foreign")
}

model ramos {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  label               String                @db.VarChar(255)
  estatus             Boolean               @default(true)
  created_at          DateTime?             @default(now()) @db.Timestamp(0)
  updated_at          DateTime?             @default(now()) @db.Timestamp(0)
  deleted_at          DateTime?             @db.Timestamp(0)
  companias_productos companias_productos[]
  companias_ramos     companias_ramos[]
  polizas             polizas[]
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model tipos_de_usuarios {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  label        String         @db.VarChar(255)
  estatus      Boolean        @default(true)
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  updated_at   DateTime?      @default(now()) @db.Timestamp(0)
  deleted_at   DateTime?      @db.Timestamp(0)
  usuario_team usuario_team[]
}

model tipos_de_vencimiento {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  label      String    @db.VarChar(255)
  estatus    Boolean   @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  polizas    polizas[]
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @db.Timestamp(0)
}

model usuario_claves {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  compania_id BigInt    @db.UnsignedBigInt
  clave       String    @db.VarChar(255)
  estatus     Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  usuario_id  BigInt    @db.UnsignedBigInt
  compania    compania  @relation(fields: [compania_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "usuario_claves_compania_id_foreign")

  @@index([compania_id], map: "usuario_claves_compania_id_foreign")
}

model usuario_team {
  id                BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  principal_id      BigInt            @db.UnsignedBigInt
  tipo_id           BigInt            @db.UnsignedBigInt
  usuario_id        BigInt            @db.UnsignedBigInt
  estatus           Boolean           @default(true)
  created_at        DateTime?         @default(now()) @db.Timestamp(0)
  updated_at        DateTime?         @default(now()) @db.Timestamp(0)
  tipos_de_usuarios tipos_de_usuarios @relation(fields: [tipo_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "usuario_team_tipo_id_foreign")
  usuarios          usuarios          @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "usuario_team_usuario_id_foreign")

  @@index([tipo_id], map: "usuario_team_tipo_id_foreign")
  @@index([usuario_id], map: "usuario_team_usuario_id_foreign")
}

model usuarios {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  nombre       String         @db.VarChar(255)
  correo       String         @unique(map: "usuarios_correo_unique") @db.VarChar(255)
  password     String         @db.VarChar(255)
  tipo_id      BigInt         @db.UnsignedBigInt
  estatus      Boolean        @default(true)
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  updated_at   DateTime?      @default(now()) @db.Timestamp(0)
  polizas      polizas[]
  usuario_team usuario_team[]
}

enum poliza_recibos_estatus {
  Pendiente
  Pagado
  Cancelado
}
